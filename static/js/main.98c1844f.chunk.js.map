{"version":3,"sources":["components/SuperCheckbox/SuperCheckbox.module.css","pages/404/Error404.module.css","components/SuperInputText/SuperInputText.module.css","components/SuperButton/SuperButton.module.css","components/SuperEditableSpan/EditableSpan.module.css","routes/Routes.tsx","pages/Profile/ProfilePage.tsx","pages/404/404.tsx","components/SuperButton/SuperButton.tsx","components/SuperCheckbox/SuperCheckbox.tsx","components/SuperSelect/SuperSelect.tsx","components/SuperRadio/SuperRadio.tsx","components/SuperInputText/SuperInputText.tsx","components/SuperEditableSpan/SuperEditableSpan.tsx","pages/Test/TestPage.tsx","pages/Auth/Login/Login.tsx","pages/Auth/Register/Register.tsx","pages/Auth/LostPassword/LostPassword.tsx","pages/Auth/NewPassword/NewPassword.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","PATH","ProfilePage","Error404","className","s","wrapper","title","subtitle","SuperButton","red","restProps","finalClassName","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","container","e","currentTarget","checked","checkmark","SuperSelect","options","onChangeOption","mappedOptions","map","opt","index","value","SuperRadio","name","onChangeCallback","o","i","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","superInput","errorInput","key","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","isEditable","TestPage","arr","setValue","setChecked","radioValue","onClick","alert","undefined","Login","props","to","RESET_PASS","activeClassName","NEW_PASS","Register","LostPassword","history","useHistory","push","NewPassword","Routes","exact","path","render","TEST","component","LOGIN","REGISTER","PROFILE","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98c1844f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3gzEo\",\"spanClassName\":\"SuperCheckbox_spanClassName__2z8Nq\",\"checkmark\":\"SuperCheckbox_checkmark__gsQj0\",\"container\":\"SuperCheckbox_container__2QwfA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Error404_wrapper__1roC2\",\"title\":\"Error404_title__2tyNs\",\"subtitle\":\"Error404_subtitle__a2Kn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3ztiN\",\"errorInput\":\"SuperInputText_errorInput__13IXd\",\"error\":\"SuperInputText_error__2NlGy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__jwWIX\",\"red\":\"SuperButton_red__KphKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isEditable\":\"EditableSpan_isEditable__3vCus\"};","import React from \"react\";\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport {ProfilePage} from \"../pages/Profile/ProfilePage\";\nimport {Error404} from \"../pages/404/404\";\nimport {TestPage} from \"../pages/Test/TestPage\";\nimport {Login} from \"../pages/Auth/Login/Login\";\nimport {Register} from \"../pages/Auth/Register/Register\";\nimport {LostPassword} from \"../pages/Auth/LostPassword/LostPassword\";\nimport {NewPassword} from \"../pages/Auth/NewPassword/NewPassword\";\n\nexport enum PATH {\n    TEST = '/test',\n    PROFILE = '/profile',\n    LOGIN = '/login',\n    REGISTER = '/register',\n    RESET_PASS = '/lostpassword',\n    NEW_PASS = '/newpassword'\n}\n\nexport const Routes = () => {\n    return <Switch>\n        <Route exact path={\"/\"} render={() => <Redirect to={PATH.TEST}/>}/>\n        <Route path={PATH.TEST} component={TestPage}/>\n        <Route path={PATH.LOGIN} component={Login}/>\n        <Route path={PATH.REGISTER} component={Register}/>\n        <Route path={PATH.PROFILE} component={ProfilePage}/>\n        <Route path={PATH.RESET_PASS} component={LostPassword}/>\n        <Route path={PATH.NEW_PASS} component={NewPassword}/>\n        <Route component={Error404}/>\n    </Switch>\n}","import React from 'react';\n\nexport const ProfilePage = () => {\n    return <>\n        <h1>Profile page</h1>\n    </>\n}","import React from 'react';\nimport s from \"./Error404.module.css\"\n\nexport const Error404 = () => {\n    return <div className={s.wrapper}>\n        <h1 className={s.title}>404</h1>\n        <h3 className={s.subtitle}>Page not found!</h3>\n        <p>This may not mean anything.<br/>I'm probably working on something that has blown up.</p>\n    </div>\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean,\n    error?: string,\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void,\n    spanClassName?: string,\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n        onChange && onChange(e)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label className={s.container}>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            <span className={s.checkmark}>&nbsp;</span>\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: any[] = options\n        ? options.map( (opt, index) =>\n            <option key={\"o_\" + index}>{opt}</option> )\n        : [] // map options with key\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    );\n}\n\nexport default SuperSelect;\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions: any[] = options ? options.map((o, i) => (\n        <label key={name + \"-\" + i}>\n            <input\n                type={\"radio\"}\n                name={name}\n                value={o}\n                onChange={onChangeCallback}\n                checked={value === o}\n            />\n            {o}\n        </label>\n    )) : [];\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    );\n}\n\nexport default SuperRadio;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void,\n    onEnter?: () => void,\n    error?: string,\n    spanClassName?: string,\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = `${s.superInput} ${className ? className : \"\"} ${error ? s.errorInput : \"\"}`; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\nimport SuperInputText from \"../SuperInputText/SuperInputText\";\nimport s from \"./EditableSpan.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\n\n    const onEnterCallback = () => {\n        setEditMode(false); // выключить editMode при нажатии Enter\n        onEnter && onEnter();\n    };\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false); // выключить editMode при нажатии за пределами инпута\n        onBlur && onBlur(e);\n    };\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true); // включить editMode при двойном клике\n        onDoubleClick && onDoubleClick(e);\n    };\n\n    const spanClassName = `${!editMode ? s.isEditable : ''} ${className}`;\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    );\n}\n\nexport default SuperEditableSpan;\n","import React, {useState} from 'react';\nimport SuperButton from \"../../components/SuperButton/SuperButton\";\nimport SuperCheckbox from \"../../components/SuperCheckbox/SuperCheckbox\";\nimport SuperSelect from \"../../components/SuperSelect/SuperSelect\";\nimport SuperRadio from \"../../components/SuperRadio/SuperRadio\";\nimport SuperEditableSpan from \"../../components/SuperEditableSpan/SuperEditableSpan\";\n\nexport const TestPage = () => {\n    const arr = [\"x\", \"y\", \"z\"];\n    const [value, setValue] = useState<string>(\"\");\n    const [checked, setChecked] = useState<boolean>(false);\n    const [radioValue, onChangeOption] = useState(arr[1]);\n    const alertHandle = () =>\n        alert(`Input value is: ${value}\\nCheckbox checked: ${checked}\\nSelected radio/option: ${radioValue}`)\n    return <>\n        <h1>Here are list of Super components:</h1>\n        <div>\n            <SuperButton onClick={alertHandle}>Check status</SuperButton>\n        </div>\n        <div>\n            <SuperCheckbox\n                checked={checked}\n                onChangeChecked={setChecked}\n            >\n                Label for checkbox\n            </SuperCheckbox>\n        </div>\n        <div>\n            <SuperSelect\n                options={arr}\n                value={radioValue}\n                onChangeOption={onChangeOption}\n            />\n        </div>\n        <div>\n            <SuperRadio\n                name={\"radio\"}\n                options={arr}\n                value={radioValue}\n                onChangeOption={onChangeOption}\n            />\n        </div>\n        <div>\n            <SuperEditableSpan\n                value={value}\n                onChangeText={setValue}\n                spanProps={{children: value ? undefined : \"Enter text...\"}}/>\n        </div>\n    </>\n}","import React from 'react'\nimport {NavLink} from \"react-router-dom\";\nimport {PATH} from \"../../../routes/Routes\";\ntype Props = {}\n\nexport const Login = (props: Props) => {\n    return (\n        <>\n            <h1>Login</h1>\n            <NavLink to={PATH.RESET_PASS} activeClassName={\"active\"}>Lost password</NavLink>\n            <NavLink to={PATH.NEW_PASS} activeClassName={\"active\"}>New password</NavLink>\n        </>\n    )\n}","import React from 'react'\ntype Props = {}\n\nexport const Register = (props: Props) => {\n    return (\n        <h1>Registration</h1>\n    )\n}","import React from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport SuperButton from \"../../../components/SuperButton/SuperButton\";\n\ntype Props = {}\n\nexport const LostPassword = (props: Props) => {\n    const history = useHistory()\n    const backHome = () => history.push(\"/\")\n\n    return <>\n        <h1>Reset password</h1>\n        <SuperButton onClick={backHome}>Back home</SuperButton>\n    </>\n}","import React from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport SuperButton from \"../../../components/SuperButton/SuperButton\";\ntype Props = {}\n\nexport const NewPassword = (props: Props) => {\n    const history = useHistory()\n    const backHome = () => history.push(\"/\")\n\n    return <>\n        <h1>Set new password</h1>\n        <SuperButton onClick={backHome}>Back home</SuperButton>\n    </>\n}","import React from 'react'\nimport {PATH} from \"../../routes/Routes\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Props = {}\n\nexport const Header = (props: Props) => {\n    return (\n        <header className={`header`}>\n            <NavLink to={PATH.TEST} activeClassName={\"active\"}>Home</NavLink>\n            <NavLink to={PATH.PROFILE} activeClassName={\"active\"}>Profile</NavLink>\n            <NavLink to={PATH.LOGIN} activeClassName={\"active\"}>Login</NavLink>\n        </header>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport {Routes} from \"./routes/Routes\";\nimport {Header} from \"./components/Header/Header\";\n\nconst App = () => {\n  return (\n      <HashRouter>\n        <div className=\"App\">\n            <Header />\n            <Routes />\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}